dpl
dpl %<>% pivot_longer(2:5,names_sep="_",names_to=c("dim","tempo"))
dpl
dpl %<>% pivot_wider(names_from="dim", values_from="value")
dpl
## DA COMPLETARE
#stessa variabile (es. disoccupazione, ma anche sesso) spezzata su piu colonne
#alternativa
#dati %<>% pivot_longer("tutti_attivita":"f_disoccupazione", #names_sep = "_", names_to = c("sesso", "tasso"))%>%
# pivot_wider(names_from = tasso, values_from = value)
dati %>% pivot_longer(3:12, names_sep = "_", names_to = c("sesso", "indicatore"), values_to = "Valore")%>%
#qui se non metti values_to ti genera in automatico una colonna values
#ho 4 variabili (attivita, occupazione...) in una sola colonna
pivot_wider(names_from = indicatore, values_from = valore)
library(tidyverse)
library(magrittr)
library(readxl)
url = 'https://www.istat.it/it/files//2021/04/202102_serie-storiche.xls'
file = "202102_serie-storiche.xls"
if( ! file.exists(file) ){
download.file(url,file,mode="wb")
}
## DA COMPLETARE
dati<-read_xls(file, sheet=1, "A8:P214")
#si prende anche la 8 perche in generale la prima viene usata per dare i nomi alle colonne
#altra possibilità:
#scarto le prime 7 righe (equivalente)
#read_xls(file, "Tab1", skip=7)
#le colonne posso rinominarle dopo, oppure, saltare anche riga titoli e rinominarle subito
#read_xls(file, "Tab1", skip=8, col_names=colonne)
dati
colonne <- rep(c("tutti","m","f"),each=6) %>%  ## ripete 6 volte ciascun prefisso
paste(                              ## concatenato con
rep(c("anno","mese",          ## ripete 3 volte le sei informazioni
"attivita","occupazione",
"disoccupazione",
"disoccupazione.giovani"),3),
sep="_") # separatore di concatenazione
colonne <- colonne[c(-12,-18)]
colonne
## DA COMPLETARE
colnames(dati)<-colonne
## DA COMPLETARE
#anno, mese si ripetono 3 volte
dati%<>%select(-7,-8, -12,-13)%>%rename(anno=tutti_anno)%>%rename(mese=tutti_mese)
#avrei potuto scrivere con stesso significato:
#dati%>%select(-m_anno,-m_mese, -f_anno,-f_mese)
dfill = data.frame(caso=c("A",NA,NA,"B",NA),
valore=c(14,13,5,4,12))
dfill
dfill %>% fill(caso)
## DA COMPLETARE
dati%<>%fill(1)
#fill riempie questi NA
#comune trovarlo in excel
dpl <- data.frame(
id = 1:4,
altezza_prima = c(2,5,3,8),
altezza_dopo = c(3,5,6,9),
larghezza_prima = c(12,22,15,15),
larghezza_dopo = c(13,21,16,18)
)
dpl
dpl %<>% pivot_longer(2:5,names_sep="_",names_to=c("dim","tempo"))
dpl
dpl %<>% pivot_wider(names_from="dim", values_from="value")
dpl
## DA COMPLETARE
#stessa variabile (es. disoccupazione, ma anche sesso) spezzata su piu colonne
#alternativa
#dati %<>% pivot_longer("tutti_attivita":"f_disoccupazione", #names_sep = "_", names_to = c("sesso", "tasso"))%>%
# pivot_wider(names_from = tasso, values_from = value)
dati %>% pivot_longer(3:12, names_sep = "_", names_to = c("sesso", "indicatore"))%>%
#qui se non metti values_to ti genera in automatico una colonna values
#ho 4 variabili (attivita, occupazione...) in una sola colonna
pivot_wider(names_from = indicatore, values_from = value)
library(tidyverse)
library(magrittr)
library(readxl)
url = 'https://www.istat.it/it/files//2021/04/202102_serie-storiche.xls'
file = "202102_serie-storiche.xls"
if( ! file.exists(file) ){
download.file(url,file,mode="wb")
}
## DA COMPLETARE
dati<-read_xls(file, sheet=1, "A8:P214")
#si prende anche la 8 perche in generale la prima viene usata per dare i nomi alle colonne
#altra possibilità:
#scarto le prime 7 righe (equivalente)
#read_xls(file, "Tab1", skip=7)
#le colonne posso rinominarle dopo, oppure, saltare anche riga titoli e rinominarle subito
#read_xls(file, "Tab1", skip=8, col_names=colonne)
dati
colonne <- rep(c("tutti","m","f"),each=6) %>%  ## ripete 6 volte ciascun prefisso
paste(                              ## concatenato con
rep(c("anno","mese",          ## ripete 3 volte le sei informazioni
"attivita","occupazione",
"disoccupazione",
"disoccupazione.giovani"),3),
sep="_") # separatore di concatenazione
colonne <- colonne[c(-12,-18)]
colonne
## DA COMPLETARE
colnames(dati)<-colonne
## DA COMPLETARE
#anno, mese si ripetono 3 volte
dati%<>%select(-7,-8, -12,-13)%>%rename(anno=tutti_anno)%>%rename(mese=tutti_mese)
#avrei potuto scrivere con stesso significato:
#dati%>%select(-m_anno,-m_mese, -f_anno,-f_mese)
dfill = data.frame(caso=c("A",NA,NA,"B",NA),
valore=c(14,13,5,4,12))
dfill
dfill %>% fill(caso)
## DA COMPLETARE
dati%<>%fill(1)
#fill riempie questi NA
#comune trovarlo in excel
dpl <- data.frame(
id = 1:4,
altezza_prima = c(2,5,3,8),
altezza_dopo = c(3,5,6,9),
larghezza_prima = c(12,22,15,15),
larghezza_dopo = c(13,21,16,18)
)
dpl
dpl %<>% pivot_longer(2:5,names_sep="_",names_to=c("dim","tempo"))
dpl
dpl %<>% pivot_wider(names_from="dim", values_from="value")
dpl
## DA COMPLETARE
#stessa variabile (es. disoccupazione, ma anche sesso) spezzata su piu colonne
#alternativa
#dati %<>% pivot_longer("tutti_attivita":"f_disoccupazione", #names_sep = "_", names_to = c("sesso", "tasso"))%>%
# pivot_wider(names_from = tasso, values_from = value)
dati %<>% pivot_longer(3:12, names_sep = "_", names_to = c("sesso", "indicatore"))%>%
#qui se non metti values_to ti genera in automatico una colonna values
#ho 4 variabili (attivita, occupazione...) in una sola colonna
pivot_wider(names_from = indicatore, values_from = value)
View(dati)
## DA COMPLETARE
#as_factor o factor
#noi non vogliamo ordinare i mesi in ordine alfabetico
#factor() non va bene quindi
#nostro dataset è ordinato e va bene as_factor() qui
#se non fosse stato cosi, avrei dovuto fornire io ordine
dati%>% mutate(sesso=as_factor(sesso))%>%
mutate(mese=as_factor(mese),
anno=as.integer(anno))
## DA COMPLETARE
#as_factor o factor
#noi non vogliamo ordinare i mesi in ordine alfabetico
#factor() non va bene quindi
#nostro dataset è ordinato e va bene as_factor() qui
#se non fosse stato cosi, avrei dovuto fornire io ordine
dati%<>% mutate(sesso=as_factor(sesso))%>%
mutate(mese=as_factor(mese),
anno=as.integer(anno))
## DA COMPLETARE
dati%<>%
mutate(data=paste(anno, as.integer(mese),1, sep="-"))%>%
mutate(data=as.Date(data))
#come mettere l'ultimo giorno del mese?
ultimo_giorno<-function(anno, mese){
as.Date(paste(anno,mese+1,1,sep="-"))-1
}
ultimo_giorno(2021,2)
## DA COMPLETARE
dati%<>%
mutate(data=paste(anno, as.integer(mese),1, sep="-"))%>%
mutate(data=as.Date(data))
#come mettere l'ultimo giorno del mese?
ultimo_giorno<-function(anno, mese){
as.Date(paste(anno,mese+1,1,sep="-"))-1
}
ultimo_giorno(2020,2)
## DA COMPLETARE
dati%<>%
mutate(data=paste(anno, as.integer(mese),1, sep="-"))%>%
mutate(data=as.Date(data))
#come mettere l'ultimo giorno del mese?
ultimo_giorno<-function(anno, mese){
as.Date(paste(anno,mese+1,1,sep="-"))-1
}
ultimo_giorno(2020,12)
## DA COMPLETARE
dati%<>%
mutate(data=paste(anno, as.integer(mese),1, sep="-"))%>%
mutate(data=as.Date(data))
#come mettere l'ultimo giorno del mese?
ultimo_giorno<-function(anno, mese){
as.Date(paste(anno,(mese%%12)+1,1,sep="-"))-1
}
ultimo_giorno(2020,12)
## DA COMPLETARE
dati%<>%
mutate(data=paste(anno, as.integer(mese),1, sep="-"))%>%
mutate(data=as.Date(data))
#come mettere l'ultimo giorno del mese?
ultimo_giorno<-function(anno, mese){
as.Date(paste(anno,(mese%%12)+1,1,sep="-"))-1
#vai al primo del mese successivo e poi un giorno indietro
#problema è con dicembre
}
ultimo_giorno(2020,1)
## DA COMPLETARE
dati%<>%
mutate(data=paste(anno, as.integer(mese),1, sep="-"))%>%
mutate(data=as.Date(data))
#come mettere l'ultimo giorno del mese?
ultimo_giorno<-function(anno, mese){
as.Date(paste(anno,(mese%%12)+1,1,sep="-"))-1
#vai al primo del mese successivo e poi un giorno indietro
#problema è con dicembre
#13 diviso 12 fa 1 con resto 1(il modulo appunto)
}
ultimo_giorno(2020,12)
## DA COMPLETARE
dati%<>%
mutate(data=paste(anno, as.integer(mese),1, sep="-"))%>%
mutate(data=as.Date(data))
#come mettere l'ultimo giorno del mese?
ultimo_giorno<-function(anno, mese){
#valori booleani diventano 1 se true, 0 se false
as.Date(paste(anno+(mese==12),(mese%%12)+1,1,sep="-"))-1
#vai al primo del mese successivo e poi un giorno indietro
#problema è con dicembre
#12 diviso 12 fa 1 con resto 0(il modulo appunto)
}
ultimo_giorno(2020,12)
## DA COMPLETARE
dati%<>%
mutate(data=paste(anno, as.integer(mese),1, sep="-"))%>%
mutate(data=as.Date(data))
#come mettere l'ultimo giorno del mese?
ultimo_giorno<-function(anno, mese){
#valori booleani diventano 1 se true, 0 se false
#dava problemi dicembre perche arrivava a 1/1/2020 e facendo meno 1 tornava 31-12-2019
as.Date(paste(anno+(mese==12),(mese%%12)+1,1,sep="-"))-1
#vai al primo del mese successivo e poi un giorno indietro
#problema è con dicembre
#12 diviso 12 fa 1 con resto 0(il modulo appunto)
}
#ultimo_giorno(2020,12)
## DA COMPLETARE
dati%>%
mutate(data=paste(anno, as.integer(mese),1, sep="-"))%>%
mutate(data=as.Date(data))%>%
mutate(data=ultimo_giorno(anno, as.integer(mese)))
#come mettere l'ultimo giorno del mese?
ultimo_giorno<-function(anno, mese){
#valori booleani diventano 1 se true, 0 se false
#dava problemi dicembre perche arrivava a 1/1/2020 e facendo meno 1 tornava 31-12-2019
as.Date(paste(anno+(mese==12),(mese%%12)+1,1,sep="-"))-1
#vai al primo del mese successivo e poi un giorno indietro
#problema è con dicembre
#12 diviso 12 fa 1 con resto 0(il modulo appunto)
}
#ultimo_giorno(2020,12)
## DA COMPLETARE
dati%>%
mutate(data=paste(anno, as.integer(mese),1, sep="-"))%>%
mutate(data=as.Date(data))%>%
mutate(data=ultimo_giorno(anno, as.integer(mese)))%>%
#per riordinare le colonne
select(data, anno, mese, everything())
#come mettere l'ultimo giorno del mese?
ultimo_giorno<-function(anno, mese){
#valori booleani diventano 1 se true, 0 se false
#dava problemi dicembre perche arrivava a 1/1/2020 e facendo meno 1 tornava 31-12-2019
as.Date(paste(anno+(mese==12),(mese%%12)+1,1,sep="-"))-1
#vai al primo del mese successivo e poi un giorno indietro
#problema è con dicembre
#12 diviso 12 fa 1 con resto 0(il modulo appunto)
}
#ultimo_giorno(2020,12)
## DA COMPLETARE
dati%<>%
mutate(data=paste(anno, as.integer(mese),1, sep="-"))%>%
mutate(data=as.Date(data))%>%
mutate(data=ultimo_giorno(anno, as.integer(mese)))%>%
#per riordinare le colonne
select(data, anno, mese, everything())
#come mettere l'ultimo giorno del mese?
ultimo_giorno<-function(anno, mese){
#valori booleani diventano 1 se true, 0 se false
#dava problemi dicembre perche arrivava a 1/1/2020 e facendo meno 1 tornava 31-12-2019
as.Date(paste(anno+(mese==12),(mese%%12)+1,1,sep="-"))-1
#vai al primo del mese successivo e poi un giorno indietro
#problema è con dicembre
#12 diviso 12 fa 1 con resto 0(il modulo appunto)
}
#ultimo_giorno(2020,12)
## DA COMPLETARE
ggplot(filter(dati, sesso!="tutti"),
aes(x=data, y=disoccupazione, color=sesso))+
geom_line()+
scale_color_manual(values=c("blue","red"))
## DA COMPLETARE
ggplot(filter(dati, sesso!="tutti"),
aes(x=data, y=disoccupazione, color=sesso))+
geom_line()+
scale_color_manual(values=c("blue","red"))+
ggtitle("Occupazione")+
ylab("")
## DA COMPLETARE
ggplot(filter(dati, sesso!="tutti"),
aes(x=data, y=disoccupazione, color=sesso))+
geom_line()+
scale_color_manual(values=c("blue","red"))+
ggtitle("Disoccupazione")+
ylab("")
## DA COMPLETARE
ggplot(filter(dati, sesso=="tutti"), aes(x=data, y=disoccupazione.giovani))+
geom_line()
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
#ordine con cui raggruppo è irrilevante
group_by(anno, sesso)%>%
summarise(occupazione_media=mean(occupazione))%>%
ggplot(aes(x=anno, y=occupazione_media, group=sesso, color=sesso))+
geom_point()+
geom_line()+
scale_color_manual(values=c("blue","red"))
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
#ordine con cui raggruppo è irrilevante
group_by(anno, sesso)%>%
summarise(occupazione_media=mean(occupazione))%>%
ggplot(aes(x=anno, y=occupazione_media, group=sesso, color=sesso))+
geom_line()+
scale_color_manual(values=c("blue","red"))
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
#ordine con cui raggruppo è irrilevante
group_by(anno, sesso)%>%
summarise(occupazione_media=mean(occupazione), .groups = "drop")%>%
ggplot(aes(x=anno, y=occupazione_media, group=sesso, color=sesso))+
geom_line()+
scale_color_manual(values=c("blue","red"))
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
#ordine con cui raggruppo è irrilevante
group_by(anno, sesso)%>%
summarise(occupazione_media=mean(occupazione), .groups = "drop")
# ggplot(aes(x=anno, y=occupazione_media, group=sesso, color=sesso))+
#  geom_line()+
# scale_color_manual(values=c("blue","red"))
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
#ordine con cui raggruppo è irrilevante
group_by(anno, sesso)%>%
summarise(occupazione_media=mean(occupazione), .groups = "drop")%>%
ggplot(aes(x=anno, y=occupazione_media, group=sesso, color=sesso))+
geom_line()+
scale_color_manual(values=c("blue","red"))
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
#ordine con cui raggruppo è irrilevante
group_by(anno, sesso)%>%
#summarise scarta il secondo raggruppamento di solito
#per questo aggiunge.groups="drop"
#scarta i gruppi fatti prima
#per fare il grafico è indifferente
summarise(occupazione_media=mean(occupazione), .groups = "drop")%>%
ggplot(aes(x=anno, y=occupazione_media, group=sesso, color=sesso))+
geom_line()+
scale_color_manual(values=c("blue","red"))
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
#ordine con cui raggruppo è irrilevante
group_by(anno, sesso)%>%
#summarise scarta il secondo raggruppamento di solito
#per questo aggiunge.groups="drop"
#scarta i gruppi fatti prima
#per fare il grafico è indifferente
summarise(occupazione_media=mean(occupazione), .groups = "drop")%>%
ggplot(aes(x=anno, y=occupazione_media, group=sesso, color=sesso))+
geom_line()+
scale_color_manual(values=c("blue"))
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
#ordine con cui raggruppo è irrilevante
group_by(anno, sesso)%>%
#summarise scarta il secondo raggruppamento di solito
#per questo aggiunge.groups="drop"
#scarta i gruppi fatti prima
#per fare il grafico è indifferente
summarise(occupazione_media=mean(occupazione), .groups = "drop")%>%
ggplot(aes(x=anno, y=occupazione_media, group=sesso, color=sesso))+
geom_line()+
scale_color_manual(values=c("blue","red"))
## DA COMPLETARE
dati%>%
filter(sesso=="tutti")%>%
ggplot(aes(x=mese, y=disoccupazione, group=anno ))+
theme_minimal()
geom_line()
## DA COMPLETARE
dati%>%
filter(sesso=="tutti")%>%
ggplot(aes(x=mese, y=disoccupazione, group=anno ))+
theme_minimal()+
geom_line()
## DA COMPLETARE
dati%>%
filter(sesso=="tutti")%>%
ggplot(aes(x=mese, y=disoccupazione, group=anno ))+
theme_minimal()+
geom_line()
#piccoli multipli
dati%>%
filter(sesso=="tutti")%>%
ggplot(aes(x=mese, y=disoccupazione, group=anno ))+
theme_minimal()+
geom_line()+
facet_wrap(~mese)
## DA COMPLETARE
dati%>%
filter(sesso=="tutti")%>%
ggplot(aes(x=mese, y=disoccupazione, group=anno ))+
theme_minimal()+
geom_line()
#piccoli multipli
dati%>%
filter(sesso=="tutti")%>%
ggplot(aes(x=mese, y=disoccupazione, group=anno ))+
theme_minimal()+
geom_line()+
facet_wrap(~anno)
## DA COMPLETARE
dati%>%
filter(sesso=="tutti")%>%
ggplot(aes(x=mese, y=disoccupazione, color=anno=="2020", size=anno=="2020", group=anno, color=anno))+
geom_point()+
scale_size_manual(values=c(0.2,1.5),guide="none")+
scale_color_manual(values=c("grey70","tomato"),guide="none")+
#primo valore lo da al false, secondo al caso true
geom_line()+
theme_bw()
## DA COMPLETARE
dati%>%
filter(sesso=="tutti")%>%
ggplot(aes(x=mese, y=disoccupazione, color=anno=="2020", size=anno=="2020", group=anno))+
geom_point()+
scale_size_manual(values=c(0.2,1.5),guide="none")+
scale_color_manual(values=c("grey70","tomato"),guide="none")+
#primo valore lo da al false, secondo al caso true
geom_line()+
theme_bw()
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
ggplot(aes(x=sesso, y=attivita))+
geom_boxplot()
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
ggplot(aes(x=sesso, y=attivita))+
geom_boxplot()+
ylab("")+
ggtitle("Tasso di attività")
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
ggplot(aes(x=sesso, y=attivita, fill=sesso))+
geom_boxplot()+
ylab("")+
ggtitle("Tasso di attività")+
scale_fill_manual(values = c("steelblue", "pink"))
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
ggplot(aes(x=sesso, y=attivita/100, fill=sesso))+
geom_boxplot()+
ylab("")+
ggtitle("Tasso di attività")+
scale_fill_manual(values = c("steelblue", "pink"))+
scale_y_continuous(labels = scales::percent_format())
#attivita è un valore percentuale
#labels=dato un valore genera un etichetta (scrivo funzione come abbiamo fatto all'inizio di R), oppure uso scales
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
ggplot(aes(x=sesso, y=attivita/100, fill=sesso))+
geom_boxplot()+
ylab("")+
ggtitle("Tasso di attività")+
scale_fill_manual(values = c("steelblue", "pink"))+
scale_y_continuous(labels = scales::percent_format())+
#attivita è un valore percentuale
#labels=dato un valore genera un etichetta (scrivo funzione come abbiamo fatto all'inizio di R), oppure uso scales
theme_minimal()
## DA COMPLETARE
dati%>%
filter(sesso!="tutti")%>%
ggplot(aes(x=sesso, y=attivita/100, fill=sesso))+
geom_boxplot()+
ylab("")+
ggtitle("Tasso di attività")+
scale_fill_manual(values = c("steelblue", "pink"), guide="none")+
scale_y_continuous(labels = scales::percent_format())+
#attivita è un valore percentuale
#labels=dato un valore genera un etichetta (scrivo funzione come abbiamo fatto all'inizio di R), oppure uso scales
theme_minimal()
